class Solution {
public:
    int n;
    int dfs(int node,vector<vector<int> >& graph,vector<int>& vis,unordered_set<int>& seen){
        if(vis[node]) return 0;
        if(seen.find(node)!=seen.end()) return -1;
        vis[node] = true;
        int ans=1,temp=0;
        for(int i=0;i<n;i++){
            if(node!=i && graph[node][i]==1){
                temp = dfs(i,graph,vis,seen);
                if(temp==-1){
                    seen.insert(node);
                    return -1;
                }
                ans+=temp;
            }
        }
        return ans;
    }
    int minMalwareSpread(vector<vector<int>>& graph,vector<int>& initial) {
        n = graph.size();
        unordered_set<int> seen(initial.begin(),initial.end());
        sort(initial.begin(),initial.end());
        int sum=0,temp=0,ans=-1,val=-1;
        for(int a: initial){
            vector<int> vis(n,false);
            sum = 0;
            vis[a] = true;
            for(int i=0;i<n;i++){
                if(i!=a && graph[a][i]==1){
                    temp = dfs(i,graph,vis,seen);
                    if(temp < 0) continue;
                    sum += temp;
                }
            }
            if(ans < sum){
                ans = sum;
                val = a;
            }
        }
        return val;
    }
};
